node.js , text editor 만 있으면 따라올수 있다..!

새로운 접근방식 제공..
CBA
DOB 뿐 아니라 iOS, Android 등의 추상화를 갖춘 CBA

가상 DOM 과 스마트 조정 알고리즘 덕분에 뛰어난 성능 제공,
ㅂ헤드리스 브라우저를 스핀업(시작) 하지 않고도 테스트 수행 가능

에코시스템이 개발자에게 다양한 라이브러리와 컴포넌트 제공


1.1 단순함

### 명령형보다 선언형
파이프라인, 파이프라인,,, 실용주의 프로그래머에서 본 그거..!



### 순수 자바스크립트를 사용하는 CBA
DSL 을 사용하지 않고, 순수 자바스크립트만 사용,
-> 컴포넌트가 분리되지 않음 (Angular 와 차이점)

### 강력한 추상화
* 네이티브 이벤트에서 브라우저의 차이를 추상화하는 합성이벤트
네이티브 이벤트를 감싸는 래퍼인, 합성 이벤트 객체..
-> 코드를 실행하는 브라우저에 상관없이, 동일한 동작 기대 가능


* JS DOM 을 추상화하는 JavaScript XML (JSX)
JSX는 자바스크립트 위에 약간의 구문요소를 얹은 것,
<> 를 사용하여 HTML 과 유사한 표기법을 사용하여, 자바스크립트에서 React 요소 작성 가능..
-> 코드를 더 잘 구현하고, 읽을 수 있음..

네이티브 자바스크립트로 컴파일된 미니 언어..

실행 중에 JSX 를 네이티브 자바스크립트로 컴파일하는 런타임 트랜스포머 라이브러리를 사용함
-> 브라우저에서 JSX 를 로드하더라도, JSX 실행이 아니라, 자바스크립트를 실행하는 것임


* 브라우저가 아닌 환경(예 : 서버) 에서도 렌더링 할 수 있는 브라우저 독립성..

React 컴포넌트를 렌더링하는데, 많은 옵션이 있음.. (서버에서)
템플릿을 서버에서 일부 콘텐츠로 렌더링한 다음
나중에 브라우저에서 라이브 데이터로 다시 업데이트하는
하이브리드 접근 방식을 사용할 수도 있음


1.1.2 속도와 테스트 용이성(testability)

프레임워크는 필요한 DOM 업데이트 외에도 불필요한 업데이트를 수행하여,
복잡한 UI 의 성능을 더욱 악화시킬수 있음..

반면에, React 의 가상 DOM 은 자바스크립트 메모리에만 존재..
-> 데이터가 변경될때, 가상 DOM 을 사용해, 차이점을 비교하고,
라이브러리가 렌더링에 변경이 있음을 인지한 경우에만, 실제 DOM 을 업데이트함

(React virtual DOM 에서 Real DOM 을 렌더링
-> virtual DOM 에 state changes (setState)
-> Smart diffing algorithm (reconcilation),
"Dirty" components affected by state changes
-> Re-render only affected elements (real DOM 에 다시 렌더링..))

궁극적으로, internal state(virtual DOM) 와 뷰 (실제 DOM)이 동일하도록,
필요한 부분만 업데이트

예 : <p> 요소가 있고, 컴포넌트의 상태를 통해 텍스트를 보강하는 경우,
요소 자체가 아니라 텍스트 (즉, innerHTML 만) 업데이트 됨

따라서, 전체 요소 세트 또는 더 나아가,
전체페이지(server-side rendering)를 다시 렌더링 할때보다 성능이 향상됨


가상 DOM 의 또다른 장점...
헤드리스 브라우저 없이 단위테스트 수행 가능..
Jest, React Testing Library 등..

이후 컴포넌트와 훅의 단위테스트에 살펴볼것...



1.1.3 에코시스템과 커뮤니티

Facebook, Instagram 의 개발자들이 지원중임...

대기업이 기술을 지원한다는것은 탄탄한 테스트 기반을 제공하고,
미래에 대한 확신을 주며,
기여 속도를 높이는데 도움이 됨..


또한 커뮤니티에서 react 를 위한 훌륭한 컨텐츠가 많이 존재함...
어떤 컴포넌트나 인터페이스가 필요할때,
웹에서 컴색하면 95% 이상은 가치있는 것을 찾을 수 있을것... (내가 만들어서 공유할수도..!!!)



오픈 소스 소프트웨어의 역사는 마케팅이 코드 자체만큼이나 널리 채택되고,
성공하는 데 중요하다는 것을 보여줌..
-> 프로젝트 웹사이트가 부실하거나, 문서와 예제가 부족하거나, 로고가 못생겼다면..
대부분의 개발자는 그 프로젝트를 진지하게 받아들이지 않을것이고,

특히, 자바스크립트 라이브러리가 너무 많은 현 상황에서는 더욱 그러함..

안타깝게도.. 소프트웨어 엔지니어를 포함한 대부분의 사람들은
좋은 브랜딩과 같은 편견에 빠지기 쉬움..


다행히 react 는 훌륭한 엔지니어링 면성을 가지고 있음..


---
---

1.2 React 의 단점


* 만능이 아님
-> 앵귤러나 엠버에 필적하는 기능을 구현하려면,
Redux , Xstate 와 같은 라이브러리와 함께 사용해야

* 유지관리와 지속적인 패키지 관리가 필요
다른 패키지와 결합하여 사용하는 경우가 매우 많음..
종속성의 지속적인 관리 필요

* 새로운 접근방식을 사용해, 초보자에게 부담스러울 수 있음 (JSX, 함수형 프로그래밍)

* 단방향 바인딩만 있음
Angular 와의 차이점.. 기존에 앵귤러 개발을 하던 사람은 조금 더 많은 코드를 작성하게 될것..


* 이벤트 중심적이고 탄력적이며 반응성이 뛰어난 리액티브 프로그래밍 및 아키텍처에서와 같이 ***즉시 반응하지 않음***
외부 컨텐츠와 원활하고 반응성 있게 통합되도록 하기 위해 React Query 라이브러리같은 다른 라이브러리 사용해야..
또한 React 어플리케이션을 개발할때, 다른 사고방식을 사용해야함 (여긴 무슨소린지 모르겠음..)


---
---

1.3 웹사이트에 React 를 적용하는 방법

서버에서 렌더링 되는 "클래식" 웹사이트와
SPA 라고도 하는 클라이언트 측 웹 어플리케이션 모두에서 사용 할 수 있음..


React 의 코어 라이브러리는 UI 라이브러리임..
-> React Router , Redux 와 결합하면..
모든 웹 어플리케이션 프레임워크의 완전한 대안이 될수 있음..


현재 다른 SPA 프레임워크를 사용한다면, 아마도 모든것을 React 스택으로 바꿔야 할 것..
하이브리드 SPA 를 만드는 것은 매우 어렵고, 거의 불가능에 가까움..


*SPA의 UI 라이브러리(예: React+React Router+Redux)
    

    
*다른 기술 조합을 사용하여 구축된 웹사이트의 React 자동 완성 입력 컴포넌트와 같은 프론트엔드 스택의 드롭인 위젯으로 사용
    

    
*자주 업데이트되지 않는 콘텐츠를 제공하기 위해 배포 시 렌더링되는 정적 웹사이트
    

    
*부분적으로 서버 측 렌더링된 웹사이트 또는 SPA로, 워드프레스나 콘텐츠풀과 같은 외부 CMS에서 콘텐츠를 제공할 가능성이 있는 더 강력한 프레임워크 위에 구축됨
    

    
*React Native를 사용하는 모바일 앱 또는 Electron을 사용하는 데스크톱 앱의 UI 라이브러리로서



1.3.1 싱글 페이지 어플리케이션과 React

SPA 는 일반적으로 웹사이트의 하위 집합임.
웹사이트가 정보뿐만 아니라, 브라우저에서 직접 사용할 수 있는 많은 기능을 가가지고 있다면, SPA 로 간주됨

SPA 는 다양한 기술로 구축되며, React 는 스택의 한 부분일 뿐임
React 를 독립형 애플리케이션으로 사용하려면, 최사한 몇가지 다른 기술이 필요함
-> SPA 가 일반적으로 무엇인지 정의한 다음, react 가 이 구조에 어떻게 들어맞는지 설명할 것..


두꺼운 클라이언트 (Thick clients)
얇은 클라이언트 (Thin clients)


일반적인 SPA 의 매우 높은 수준의 예
    사용자가 브라우저에 URL을 입력하여 새 페이지를 엽니다.
    

    
    브라우저는 서버에 URL 요청을 보냅니다.
    

    
    서버는 HTML, CSS, JavaScript와 같은 정적 자산으로 응답합니다. 대부분의 경우 HTML은 웹 페이지의 골격만 있는 베어본 형식입니다. 일반적으로 “로드 중 …” 메시지 및/또는 회전하는 스피너 GIF가 있습니다.
    

    
    정적 자산에는 애플리케이션의 JavaScript 코드가 포함됩니다. 로드되면 이 코드는 데이터를 추가로 요청합니다.
    

    
    데이터는 JSON, XML 또는 기타 형식으로 반환됩니다.
    

    
    애플리케이션이 데이터를 수신하면 누락된 HTML(그림의 사용자 인터페이스 블록)을 렌더링할 수 있습니다. 달리 말하면, 애플리케이션이 미리 렌더링된 템플릿에 데이터를 삽입할 때 브라우저 내에서 UI를 렌더링하는 프로세스가 발생하는데, 이를 하이드레이션hydration이라고도 합니다.
    

    
    브라우저 렌더링이 완료되면 브라우저는 표시된 콘텐츠를 업데이트하고 사용자는 애플리케이션으로 작업할 수 있습니다.
    

    
    사용자는 멋진 웹 페이지를 보게 됩니다. 사용자는 페이지(그림의 입력)와 상호 작용하여 애플리케이션에서 서버로 새 요청을 트리거할 수 있으며, 2~6단계의 사이클이 계속됩니다. 이 단계에서 애플리케이션이 브라우저 라우팅을 구현하면 새 URL로 이동하면 서버에서 새 페이지가 다시 로드되는 것이 아니라 브라우저에서 애플리케이션이 다시 렌더링됩니다.


요약하면, SPA 에서는 UI 에 대한 대부분의 렌더링이 브라우저에서 이루어짐
데이터만 브라우저를 오가며 이동..
-> 서버사이드 렌더링인 "클래식" 웹사이트와 대조..

React는 데이터를 기반으로 콘텐츠를 렌더링 할 뿐만 아니라,
사용자 입력을 처리하고, 이러한 입력의 결과로 업데이트된 데이터를 기반으로 컨텐츠를 업데이트 함으로써,
6단계와 8단계에서 이 SPA  아키텍처에 적합함..



---
---

1.3.2 React 스택

리액트는 완전한 프론트엔드 SPA 프레임워크가 아님..
한가지 작업(반응형 UI 렌더링)만 수행

데이터모델링, 스타일링, 라우팅과 같은 특정 작업방식을 강요하지 않음..
-> 종종 라우팅 및 / 또는 데이터 라이브러리와 함께 사용해야...


스택의 작은부분으로 리액트를 사용할수 있지만,
대부분 리액트 코어 자체와, 리액트와 함께 특별히 사용하도록 만들어진
데이터, 라우팅 및 스타일링 라이브러리 로 구성된 React 중심 스택을 사용함


데이터 모델 라이브러리 및 백엔드  -   TanStack Query (https://tanstack.com/query/latest), Redux (http://redux.js.org), Recoil.js (https://recoiljs.org/), XState (https://xstate.js.org/), and Apollo (www.apollographql.com/) 등이 그 예입니다.
    

    
      라우팅 라이브러리  -  대부분 React Router (https://github.com/remix-run/react-router) 또는 많은 프레임워크에서 구현된 유사한 라우터.
    

    
      스타일링 라이브러리  -  Material UI (https://mui.com/) 또는  Bootstrap (https://react-bootstrap.github.io/)과 같은 사전 정의된 스타일 컴포넌트 세트 또는 Styled-Components (https://styled-components.com/), Vanilla Extract (https://vanilla-extract.style/), 심지어 Tailwind CSS(https://tailwindcss.com/)와 같이 React 컴포넌트 내에서 CSS로 쉽게 작업할 수 있는 라이브러리.


리액트를 위한 라이브러리 생태계는 매일 성장중임..
또한, 컴포저블 컴포넌트 (UI 의 독립된 구성) 을 설ㄹ명하는 리액트의 기능 덕분에,
코드를 재사용할 수 있음..

많은 컴포넌트가 npm 모듈로 패키징 되어있음 (가져다 쓰기만 하면..)

훌륭한 (선별된) 목록
https://github.com/brillout/awesome-react-components

UI 컴포넌트 (수많은 폼 요소 포함)
완전한 UI 프레임워크,
개발 유틸리티 및 테스트 도구까지 모든것이 포함되어 있음..


---
React 웹사이트 프레임워크...
모든것을 처리하는 본격적인 서버 측 프레임워크..

- 정적 사이트 생성기(SSG)
- 동적 서버 렌더링 React(SSR)

SSG
완전한 정적 웹사이트를 생성하는 프레임워크..
사용자의 작업이 거의 필요하지 않음
-> 블로그와 같은 소규모 개인 웹사이트에 특히 인기,
소규모 비즈니스와 전자상거래 웹사이트 (업데이트가 자주 필요하지 않은) 에도 사용 가능


SSR
더 복잡하고, 브라우저에 HTML 을 제공하기 전에,
서버에서 리액트 어플리케이션을 미리 렌더링하는 작업을 처리함..

즉, SEO 에도 좋고, 공유가능성을 수용하며, 기타 여러가지 이점이 있음

이러한 프레임워크 세가지
->
Gatsby

Next.js

Remix

이러한 프레임워크는 각각 고유한 패러다임으로 작동하는
"React 의 다양한 확장" 임

지금쯤이면 React가 무엇인지, 스택이 무엇인지,
상위 웹 애플리케이션에서 차지하는 위치가 무엇인지,
React 위에 구축된 도구를 사용하여 복잡한 웹사이트를 생성하는 방법을 이해하셨을 것입니다.

이제 첫 번째 React 애플리케이션을 작성할 차례입니다.


---
---
---

1.4 첫번째 React 앱 : Hello world

JSX 를 사용하지 않고, 일반 자바스크립트만 사용해볼것임


모든 리액트 개발자가 JSX 를 사용해 리액트를 작성하지만,
브라우저는 표준 자바스크립트만 실행할 뿐임 JSX 를 직접 이해하지는 못함 (당연..)
그렇기 때문에 순수 자바스크립트로 리액트 코드를 이해하는 것이 유리함


JSX 가 사실상 리액트의 표준 탬플린 언어이긴 하지만, 선택사항이라는 것을 보여주기 위해서 임..

설정에 너무 많은 시간을 들이지 말고 (뜨끔...)
가능한 한 빨리 React 를 시작할 수 있기를 바람..



<body> 요소에서 직접 렌더링 하는 대신
콘텐츠를 렌더링 할 <div> 노드를 만드는 이유..
->
문서 본문을 조작하는 다른 라이브러리 및 브라우저 확장 프로그램과 충돌을 일으킬수 있음..

---
경고 및 오류메시지는 노이즈를 줄이고, 보안강화, 배포크기를 최소화 하기 위해서
프로덕션 빌드에는 포함되지 않음..

프로덕션 빌드 -> react.min.js
경고와 오류메시지가 있는 개발버전
-> react.development.js

---


React : 엘리먼트를 생성
ReactDOM : <div> 컨테이너에서 렌더링하는 메서드


리액트 엘리먼트를 생성하려면,

React.createElement(elementName, data, children)
을 호출하기만 하면 됨..

elementName : HTML 태그를 문자열 또는 사용자 정의 컴포넌트 클래스를 객체로 지정함
data : 요소에 대한 속성과 속성을 포함하는 데이터 객체..
지금은 속성이 필요하지 않으므로 null 전달함

children : 자식 요소 또는 내부 HTML/텍스트 콘텐츠


