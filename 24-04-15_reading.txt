5.6 요약

  

  
    
      컴포넌트 state는 애플리케이션을 인터랙티브하게 만드는 데 사용됩니다. 상태 저장 컴포넌트가 없다면 애플리케이션 개발에서 거의 아무 것도 얻을 수 없습니다.
    

    
      클래스 기반 컴포넌트와 함수형 컴포넌트 모두에 state를 가질 수 있습니다.
    

    
      함수형 컴포넌트의 상태는 상태 값마다 별도의 설정자가 있는 useState에 대한 별도의 별개의 호출로 초기화됩니다.
    

    
      정적 값, 동적 값 또는 초기 값을 반환하는 함수를 제공하여 useState 훅의 값을 초기화할 수 있습니다.
    

    
      useState hook의 값은 언제든지 업데이트할 수 있지만, 콜백이나 다른 훅에서만 업데이트할 수 있고 컴포넌트 정의에서 직접 업데이트할 수는 없습니다.
    

    
      useState hook의 값을 업데이트할 때 새 값을 직접 제공하거나 이전 값을 기반으로 새 값을 반환하는 함수를 제공할 수 있습니다.
    

    
      클래스 기반 컴포넌트의 상태는 단일 객체로 초기화되고 setState 메서드를 사용하여 업데이트됩니다.
    

    
      상태 저장 클래스 기반 컴포넌트에서 상태 저장 함수형 컴포넌트로 변환하려면 두 접근 방식이 크게 다르기 때문에 더 큰 규모의 리팩터링이 필요할 수 있습니다. - <리액트 Quickly Second Edition>, 모튼 바클런드 - 밀리의 서재 https://www.millie.co.kr/v3/bookDetail/202c2651fc0f46b6




## 6장

### effect 함수!!
```javascript
function Component() {
      useEffect(
            function effect() {
                  // some effect here
                  return function cleanup() {
                        // some cleanup here
                  };
            },
            [dependency1, 2, ...]
      );
      // rest of Component
}
```


cleanup 함수만 필요한 경우..
이펙트 함수에서 함수만 반환하면 됨..
(람다식 복잡함에 주의...)

```javascript
function Dialog() {
      useEffect(
            () => () => trackEvent('dialog_dismissed'),
            []
      )
}
```


---
---

state 가 setter 를 통해 바껴야 하므로... 
부모객체에서 단순히 let 하고, 해당 변수를 바꿔줘도 렌더링이 바뀌지 않음..
useState() 를 사용해서 state 를 만들고
setter 를 통해서 바꿔주자!!!

// function App() {

/**
 * state 가 setter 를 통해 바껴야 하므로... 
 *  부모객체에서 단순히 let 하고, 해당 변수를 바꿔줘도 렌더링이 바뀌지 않음..
 * useState() 를 사용해서 state 를 만들고
 * setter 를 통해서 바꿔주자!!!
 * 
 */

//   let title = 'First post';
//   let body = <p>Welcome to my cool website.</p>
//   return (
//     <main>
//       <BlogPost title={title} body={body} />
//       <button onClick={() => {
//   title = 'Second post';
//   body = <p>Welcome to my cool second website.</p>
//       }}>
//         click to change the props
//       </button>
//     </main>
//   );
// }

function App() {
  const [title, setTitle] = useState("First post");
  const [body, setBody] = useState(<p>Welcome to my cool website.</p>);

  return (
    <main>
      <BlogPost title={title} body={body} />
      <button
        onClick={() => {
          setTitle("Second post");
          setBody(<p>Welcome to my cool second website.</p>);
        }}
      >
        click to change the props
      </button>
    </main>
  );
}



렌더링 할때 children!!!!!

property 로 자식 객체가 자동으로 넘어옴
디스트럭쳐링으로 children 하고 받아주면 사용준비 끝!!
(리턴해주는 곳에서 {children} 으로 사용해주자!!)



### layoutEffect 함수!!
```javascript
function Component() {
      useEffect(
            function effect() {
                  // some effect here
                  return function cleanup() {
                        // some cleanup here
                  };
            },
            [dependency1, 2, ...]
      );
      useLayoutEffect(
            () => {
                  // layout effect
                  return () => {
                        // layout cleanup
                  }
            },
            [dep1, dep2, ...]
      );
      // rest of Component
}
```


# 함수형 컴포넌트가 렌더링 되는 이유
1. 컴포넌트가 방금 마운트 된 경우(즉, 컴포넌트가 이전에는 컴포넌트 트리에 없었지만, 지금은 있는 경우)

2. 상위(부모) 컴포넌트가 다시 렌더링 된 경우

3. 컴포넌트가 업데이트된 상태 저장 훅을 사용
-> 업데이트가 너무 자주일어나지 않게 해서, 자원낭비를 줄이자!!!


1. 추가내용

return (
  <main>
    {hasDropdown && (<RemoteDropdown />)     ❶
  </main>
);


❶ 부울이 true이면 컴포넌트를 마운트합니다. 나중에 false로 설정되면 컴포넌트가 마운트 해제됩니다.

대신 다음과 같이 할 수 있습니다.

  return (
  <main>
    <RemoteDropdown isVisible={hasDropdown} />    ❶
  </main>
);


❶ 우리는 항상 컴포넌트를 마운트하고 플래그를 프로퍼티로 토글하기만 하면 됩니다.

이 플래그를 렌더링할지 여부를 나타내는 지표로 사용하려면 컴포넌트를 수정해야 합니다.

  function RemoteDropdown({ isVisible }) {
  const [options, setOptions] = useState([]);   ❶
  useEffect(() => {                             ❶
    // 로딩은 여기서 일어납니다
  }, []);
  if (!isVisible) {                             ❷
    return null;
  }
  // 나머지 컴포넌트는 여기로
);


❶ 먼저 컴포넌트에 필요한 모든 훅을 포함시킵니다.

❷ 모든 훅이 평가된 후에야 렌더링이 필요한지 여부를 확인할 수 있습니다.

조건부 렌더링에 대한 이러한 접근 방식은 일반적으로 권장되지 않지만(전자의 접근 방식이 권장됩니다),
컴포넌트가 마운트 및 언마운트를 반복하지 않고 문서에 항상 유지된 상태로 가끔씩만 실제로 렌더링하고 싶을 때 유용한 도구가 될 수 있습니다. - <리액트 Quickly Second Edition>, 모튼 바클런드 - 밀리의 서재 https://www.millie.co.kr/v3/bookDetail/202c2651fc0f46b6
(또는 display: none 사용하면 될거같기도 함..)


---

2. 추가내용...

react 는 컴포넌트가 순수하다고 가정하지 않으며, 그렇지 않을수도 있음 (순수할수도 있다는 뜻??)
그렇기 때문에 react 는 부모가 렌더링 할때마다 컴포넌트를 렌더링 함
(순수하지 않은 컴포넌트라.. 다시 렌더링)

컴포넌트가 프로퍼티를 취하는 경우,
react 는 프로퍼티의 변경 여부와 상관없이 매번 컴포너트를 렌더링 함


##### 함수 내부에서 jsx 렌더링 하기

상태를 인수로 받은 다음, 적절한 아이콘을 반화나하는 함수를 허용할수도..

훨씬 더 익숙한 방법으로 동일한 결과 가능..

몇가지 인수를 기반으로 JSX 를 반환하는 함수 -> 함수형 컴포넌트
위 함수를 약간 변경해서 사용자 정의 컴포넌트로 만들수 있음


JSX 를 렌더링 하는 함수를 제공하는 개념은 render props 라고 불리며,
이전 react 코드베이스에서 꽤나 일반적인 접근방식 이었음..

하지만 함수형 컴포넌트를 사용하면, 거의 모든 경우에
여기서 처럼 인수를 전체 컴포넌트로 변환하는 것이 더 나은 해결방법임

이렇게 하면, 데이터의 전체흐름을 훨씬 더 쉽게 이해할수 있고,
함수 (즉, 함수형 컴포넌트가 아닌)가  JSX 를 렌더링 하는 경우의
약 955% 를 해결 가능함

(길게 썻지만.. 그냥 함수형 컴포넌트 써라)


2. 두번째 경우도 있음..

MyContext.Consumer 컴포넌트와 함께,
비훅 버전의 React Context API 를 사용하는 경우임..

이 컴포넌트는 함수를 자식 컴포넌트로 취함 (이 자체로 놀라운 개념임 ...??)

하지만 이는 매우 특이한 경우이고,
함수형 컴포넌트를 사용하는 최신 react 코드베이스에서 흔히 접할수 있는 경우가 아님


이런 경우가 발생하면, doc 에서 React Context API 를 사용하는 방법을 확인하거나,

더 좋은 방법은 함수형 컴포넌트로 변환하고, 가능하면 useContext 훅을 사용하는 것임..




---
---
---

클래스 기반 컴포넌트의 life cycle

클래스 기반 컴포넌트가 마운트, 렌더링, 마운트 해제할때
훅을 사용하지 않고, Life cycle 메서드를 사용해서,
컴포넌트 생명주기의 여러 단계에 반응할수 있음

메서드는 하는일과 수명주기에서 어디에 해당하는지에 따라 이름이 지정되므로
대부분의 경우 상당히 자명함
(알아보기 쉽다는 뜻)


컴포넌트가 마운트되면, 다음 클래스 메서드가 순서대로 호출됨

1. constructor() 생성자

2. static getDerivedStateFromProps()

3. render() (우리가 예전에 작업했던 그거..!)

4. componentDidMount()


클래스 기반 컴포넌트가 (앞서 언급한 이유로) 업데이트 되면
다음의 메서드가 순서대로 호출됨

1. static getDerivedStateFromProps()

2. shouldComponentUpdate()

3. render()

4. getSnapshotBeforeUpdate()

5. componentDidUpdate()

하지만, shouldComponentUpdate() 는 정의된 경우,
false 를 반환하면 렌더링 루프를 중지할수 있다는 점에서 특별함..

