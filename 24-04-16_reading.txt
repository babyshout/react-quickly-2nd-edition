## 6장 요약

6.6 요약

  

  
    
      React 컴포넌트는 컴포넌트의 각 인스턴스에 대해 개별적인 생명주기를 가집니다.
    

    
      useEffect 훅은 컴포넌트가 마운트, 렌더링, 마운트 해제될 때 특정 컴포넌트와 관련된 부수적인 효과를 트리거하는 주요 방법입니다.
    

    
      의존성 배열을 주의 깊게 만들면 이펙트 훅이 필요한 시점에 정확히 실행되도록 트리거할 수 있으며, 이를 통해 브라우저, 네트워크 및 사용자와 다양한 방식으로 상호작용하는 스마트 컴포넌트를 만들 수 있습니다.
    

    
      컴포넌트는 컴포넌트가 마운트될 때, 컴포넌트의 상태가 업데이트될 때, 부모 컴포넌트가 렌더링될 때라는 세 가지 주요 상황에서 React가 필요하다고 판단할 때마다 렌더링됩니다.
    

    
      클래스 기반 컴포넌트는 훅을 사용할 수 없지만 비슷한 동작을 위해 생명주기 메서드에 의존합니다. 이러한 메서드는 훅으로 변환할 수 있지만 변환이 항상 간단한 것은 아닙니다. - <리액트 Quickly Second Edition>, 모튼 바클런드 - 밀리의 서재 https://www.millie.co.kr/v3/bookDetail/202c2651fc0f46b6




7.8 요약

  

  
    
      React에는 15개의 서로 다른 내장 훅이 있지만, 그 중 몇 개는 거의 사용되지 않으며, 10개 정도가 모든 React 애플리케이션이 구축되는 핵심 API로 사용됩니다.
    

    
      훅은 컴포넌트를 스마트하게 만들고 웹 페이지 전체와 상호작용할 수 있도록 하는 다양한 용도로 사용됩니다. 모든 훅의 용도는 매우 다양하지만 몇 가지 공통된 특징이 있습니다.
    

    
      애플리케이션을 상태 저장소로 만들려면 상태 저장소 훅이 필요합니다. 애플리케이션의 복잡성과 상태의 값에 따라 여러 가지 다른 훅을 사용할 수 있습니다. React 18에서는 우선순위가 낮은 상태와 우선순위가 높은 상태를 업데이트하여 React가 UI를 최대한 반응성 있게 만들도록 도울 수 있습니다.
    

    
      이펙트 훅은 6장에서 배운 것처럼 컴포넌트 내부에서 사이드 이펙트를 실행하는 데 사용됩니다. 의존성 배열을 사용하면 원하는 시간에 이펙트가 실행되도록 트리거할 수 있습니다.
    

    
      메모화 훅은 애플리케이션이 커지고 복잡해지면 React에서 렌더링을 최적화하는 데 사용됩니다.
    

    
      라이브러리 훅은 더 복잡한 코드베이스에만 사용되며 일상적인 애플리케이션에는 적합하지 않을 수 있습니다.
    

    
      훅을 사용하는 경우 훅의 두 가지 법칙, 즉 컴포넌트의 최상위 수준에서만 훅을 호출하고(조건부 훅이나 훅의 루프가 없어야 함), 함수형 컴포넌트 내부에서만 훅을 사용해야 합니다(컴포넌트 외부, 헬퍼 함수, 심지어 클래스 기반 컴포넌트에 훅이 없어야 함). - <리액트 Quickly Second Edition>, 모튼 바클런드 - 밀리의 서재 https://www.millie.co.kr/v3/bookDetail/202c2651fc0f46b6


### 훅의 두가지 핵심원칙
* 무조건 함수형 컴포넌트의 최상위 레벨에서만 훅을 호출
컴포넌트 내에서 직접적으로만 훅을 사용할 수 있고, 항상 같은 수의 훅을 포함해야 한다는 것임..
함수(함수형 컴포넌트가 아닌 다른 함수) 또는 중첩된 블록 내부(조건문, 루프)에서 훅을 호출할수 없으며,
모든 훅을 렌더링 하기 전에 컴포넌트에서 조기반환을 할 수 없음
* 함수형 컴포넌트 안에서만 훅을 호출
유일한 예외는, 커스텀 훅이라고 하는 다른 훅 내부에서 훅을 사용할수 있고,
다시 다른 커스텀 훅 내부에서 커스텀 훅을 사용할수 있다는 것으로..

이러한 커스텀 훅 또한 다른 커스텀 훅이나, 컴포넌트에서만 사용할 수 있으므로, 이 규칙을 우회할순 없으며
한 레이어(또는 여러 레이어) 아래로 숨기면 됨 (???? 10장에서 설명)